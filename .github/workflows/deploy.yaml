name: Deploy Flutter Web and Server to VPS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Flutter Web Deployment ---
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - name: Get Flutter dependencies for web
        run: flutter pub get
        working-directory: ./client

      - name: Build Flutter web
        run: flutter build web --release
        working-directory: ./client

      - name: List files after build
        run: |
          echo "Listing workspace root:"
          ls -R ${{ github.workspace }}
          echo "Listing client directory:"
          ls -R ${{ github.workspace }}/client
          echo "Listing client/build/web directory:"
          ls -R ${{ github.workspace }}/client/build/web || echo "client/build/web not found"
        shell: bash

      - name: Copy Flutter web files to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          source: "${{ github.workspace }}/client/build/web/*" # Note the /* to copy contents
          target: "${{ secrets.VPS_TARGET_PATH }}" # Should be /var/www/database_diagrams/

      - name: Copy server files to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          source: | # Multi-line source
            ${{ github.workspace }}/compose.yaml
            ${{ github.workspace }}/server/
            ${{ github.workspace }}/db/schema/
          target: "${{ secrets.VPS_SERVER_ROOT_PATH }}" # Target base directory on VPS
          debug: true

      - name: Execute deployment commands on VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          script: |
            echo "--- Starting Remote Deployment Operations ---"

            # Create necessary subdirectories if scp didn't create them (scp usually does for target)
            echo "Ensuring server subdirectories exist: ${{ secrets.VPS_SERVER_ROOT_PATH }}"
            mkdir -p ${{ secrets.VPS_SERVER_ROOT_PATH }}/server
            mkdir -p ${{ secrets.VPS_SERVER_ROOT_PATH }}/db
            mkdir -p ${{ secrets.VPS_SERVER_ROOT_PATH }}/db/schema

            # Create .env files from secrets
            echo "Creating db/.env file on VPS..."
            echo "${{ secrets.DB_ENV_CONTENT }}" > ${{ secrets.VPS_SERVER_ROOT_PATH }}/db/.env
            echo "Creating server/.env file on VPS..."
            echo "${{ secrets.SERVER_ENV_CONTENT }}" > ${{ secrets.VPS_SERVER_ROOT_PATH }}/server/.env
            echo ".env files created."

            # Docker Compose operations
            echo "Navigating to server root: ${{ secrets.VPS_SERVER_ROOT_PATH }}"
            cd ${{ secrets.VPS_SERVER_ROOT_PATH }}

            echo "Stopping existing Docker Compose services (if any)..."
            docker compose -f compose.yaml down || echo "No services to bring down or already down."

            echo "Building server Docker image (if changed)..."
            docker compose -f compose.yaml build server # Assumes Dockerfile is in server/ relative to compose.yaml

            echo "Starting Docker Compose services..."
            docker compose -f compose.yaml up -d --remove-orphans

            echo "Cleaning up unused Docker images..."
            docker image prune -f

            # Reload Nginx for web app
            echo "Reloading Nginx for web app..."
            sudo systemctl reload nginx

            echo "--- Remote Deployment Complete ---"
